/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable react/jsx-pascal-case */
import { MAIN_PATHES, PATH, PERF_TYPE } from 'api/consts'
import { DisplayModalToogler } from 'app/adminka/DisplayModalToogler'
import { getAccountProps } from 'app/getAccountProps'
import { add2favorite } from 'app/home_page/add2favorite'
import { add2keep } from 'app/home_page/add2keep'
import { removeFromFavorite } from 'app/home_page/remove.from.favorite'
import { removeFromKeep } from 'app/home_page/remove.from.keep'
import { getItemList } from 'app/hooks/getItemList'
import { Item_Perform_BTN } from 'PAGES/Adminka/components/item.perform.btn/item.perform.btn'
import { LastModify_DIV } from 'PAGES/Home_page/components/last_modify.div/last_modify.div'
import { ListItem } from 'PAGES/Home_page/components/list.item/list.item'
import { enum_ListBlocks_sortBy, TchangeSortBy, useSortBy } from './hooks/useSortBy'
import { SortButtons } from './sort.btn/SortButtons'
import { useState } from 'react'
import './perf_btn_wrapper.scss'

/**
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
 */
const trimText = (text: string) => {
	var sliced = text.slice(0, 12)
	if (sliced.length < text.length) sliced += '...'
	return sliced
}

interface SortOptions {
	SortBy: [a: string, b: keyof typeof enum_ListBlocks_sortBy][]
	SortType: [string, keyof typeof enum_ListBlocks_sortBy][][]
}

interface SortButtonsHookProps {
	changeSortBy: TchangeSortBy
	sortOptions?: SortOptions
}

/**
 * —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–µ –∫–Ω–æ–∫–ø–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function getSortButtons({ changeSortBy, sortOptions }: SortButtonsHookProps) {
	if (sortOptions) {
		const { SortBy, SortType } = sortOptions
		return <SortButtons {...{ SortBy, SortType, changeSortBy }} />
	} else return undefined
}

interface Props {
	path: keyof typeof MAIN_PATHES
	isAuthorized: boolean
	sortOptions?: SortOptions
}

/**
 * –•—É–∫ –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
export const useListBlocks = ({ path, isAuthorized, sortOptions }: Props) => {
	const [isViewCollapsed, toggleView] = useState(true) // —Ö—É–∫ –ø–æ–∑–≤–ª—è—é—â–∏–π —Å–≤–µ—Ä–Ω—É—Ç—å / —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–º–µ–Ω–µ—Ç
	const { list } = getItemList(path) // —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤ –∏–∑ –±—ç–∫–µ–Ω–¥–∞

	/**
	 * –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:
	 * - –∏–º–µ–Ω–∞ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
	 * - –∏–º–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∑–∞–∫–ª–∞–¥–∫–∏
	 * - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 */
	const { favoritesNames, keepedNames, userName } = getAccountProps()

	/**
	 * –•—É–∫ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
	 */
	const { SORT, changeSortBy, getSortedList } = useSortBy({ sortBy: 'ALPHABET', sortType: 'A_z' })

	/**
	 * –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∫–Ω–æ–ø–∫–∏
	 */
	const SortButtons = getSortButtons({ sortOptions, changeSortBy })

	/**
	 * –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
	 */
	const ListBlocks = getSortedList(list, SORT.sortBy, SORT.sortType).map((org, index) => {
		/**
		 * –ù–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		 */
		const isRenderFavoriteBtns = path === '/' || path === '/favorites' || path === '/keeped'
		const isAdminka = path === '/adminka'
		const isLiked = favoritesNames.some((orgName) => orgName === org.name)
		const isKeeped = keepedNames.some((orgName) => orgName === org.name)

		/**
		 * –ú–∞—Å—Å–∏–≤ —Ö—Ä–∞–Ω–∏—Ç —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤ –∞–¥–º–∏–Ω–∫–µ
		 */
		const adminButtonTypes: (keyof typeof PERF_TYPE)[] = ['REMOVE', 'MODIFY']

		/**
		 * –§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å–∫—Ä—ã—Ç–∏—è / —Ä–∞–∑–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∏–º–æ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
		 */
		const onItemHover = (type: 'leave' | 'enter') => {
			const el: any = document.getElementById(`open_item_${index}`)
			el.style.display = type === 'leave' ? 'none' : 'flex'
		}

		/**
		 * –§—É–Ω–∫—Ü–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏–ª–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
		 */
		const toggleItemView = () => {
			list.map((element, _index): void => {
				if (_index !== index) {
					const el: any = document.getElementById(`home-page--wrapper--element_${_index}`)
					el.style.display = isViewCollapsed ? 'none' : 'flex'
					toggleView(isViewCollapsed ? false : true)
				}
			})
		}

		/**
		 * –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞–≤–∏—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç –ª–∞–π–∫–∏ –∏ –∑–∞–∫–ª–∞–¥–∫–∏
		 */
		const onPerfButtonClick = (btnType: 'like' | 'keep') => {
			if (isAuthorized) {
				document.location.href = PATH(path) // –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É

				if (btnType === 'like') {
					isLiked ? removeFromFavorite(org.name, userName) : add2favorite(org.name, userName)
				} else if (btnType === 'keep') {
					isKeeped ? removeFromKeep(org.name, userName) : add2keep(org.name, userName)
				}
				// 	btnType === 'like' && isLiked
				// 		? removeFromFavorite(org.name, userName)
				// 		: add2favorite(org.name, userName)
				// btnType === 'keep' && isKeeped ? removeFromKeep(org.name, userName) : add2keep(org.name, userName)
			} else document.location.href = PATH('/auth') // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä. –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		}

		return (
			<div
				/**
				 * üü´ –≠–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ üü´
				 */

				/**
				 * —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏
				 */
				onMouseLeave={() => onItemHover('leave')}
				onMouseEnter={() => onItemHover('enter')}
				key={`element_${index}`}
				className="home-page--wrapper--element"
				id={`home-page--wrapper--element_${index}`}>
				<div className="home-page--wrapper--element--main_info">
					<div className="home-page--wrapper--element--org_name">
						<ListItem
							// –Ω–∞–∑–≤–Ω–∏–µ —Ñ–æ–Ω–¥–∞
							isOrgName
							Label="–ù–∞–∑–≤–∞–Ω–∏–µ"
							index={index}
							value={org.name}
						/>

						<div
							// –∫–Ω–æ–ø–∫–∞ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å" –∏–ª–∏ "–Ω–∞–∑–∞–¥"
							onClick={() => toggleItemView()}
							id={`open_item_${index}`}
							style={{ display: 'none' }}
							className="home-page--wrapper--element--open_item">
							{isViewCollapsed ? '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '–Ω–∞–∑–∞–¥ ‚Ü©Ô∏è'}
						</div>
					</div>

					<div className="home-page--wrapper--element--buttons">
						{isAdminka && // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ, —Ç–æ —Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏
							adminButtonTypes.map((type) => (
								<Item_Perform_BTN
									onClick={() => DisplayModalToogler(index, true, type)}
									Label={(type === 'MODIFY' && '–ò–∑–º–µ–Ω–∏—Ç—å') || (type === 'REMOVE' && '–£–¥–∞–ª–∏—Ç—å') || ''}
									{...{ type }}
								/>
							))}

						{isRenderFavoriteBtns && ( // —Ä–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫–æ–≤ –∏ –∑–∞–∫–ª–∞–¥–æ–∫
							<div className="perf_btn_wrapper">
								<Item_Perform_BTN
									/**
									 * üíô Like / Unlike button
									 */
									counter={org.favorite_counter}
									onClick={() => onPerfButtonClick('like')}
									Label={isLiked ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
									type={isLiked ? 'REMOVE_FROM_FAVORITE' : 'ADD_2_FAVORITE'}
								/>

								<Item_Perform_BTN
									/**
									 * üëõ Keep / Unkeep button
									 */
									counter={org.keep_counter}
									onClick={() => onPerfButtonClick('keep')}
									Label={isKeeped ? '–£–±—Ä–∞—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–∫–∏' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏'}
									type={isKeeped ? 'REMOVE_FROM_KEEPED' : 'ADD_2_KEEPED'}
								/>
							</div>
						)}
						{isAdminka && <LastModify_DIV text={`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${org.last_modify}`} />}
					</div>
				</div>

				<div
					/**
					 * ‚ÑπÔ∏è Info Block
					 */
					style={{ display: isViewCollapsed ? 'none' : 'flex' }}
					className="home-page--wrapper--element--data">
					<ListItem link Label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç —Ñ–æ–Ω–¥–∞" index={index} value={org.link1} />
					<ListItem link Label="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á—ë—Ç—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–∞" index={index} value={org.link2} />
					<ListItem
						info
						Label="–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
						index={index}
						value={
							// –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–≤–µ—Ä–Ω—É—Ç - –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
							isViewCollapsed ? trimText(org.info) : org.info
						}
					/>
				</div>
			</div>
		)
	})

	return {
		ListBlocks,
		list,
		changeSortBy,
		SortButtons,
	}
}
